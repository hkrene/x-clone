<!-- Floating Tweet Button (Mobile) -->
<div class="md:hidden lg:hidden fixed bottom-16 right-6 z-40">
  <button 
    onclick="window.tweetModal.open()"
    class="bg-blue-500 hover:bg-blue-600 text-white rounded-full p-4 shadow-lg transition-all duration-200 hover:scale-105"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
    </svg>
  </button>
</div>

<!-- Tweet Modal -->
<div id="tweet-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
  <div class="bg-black rounded-xl border border-gray-800 w-full max-w-md">
    <div class="flex justify-between items-center p-4 border-b border-gray-800">
      <button onclick="window.tweetModal.close()" class="text-gray-400 hover:text-white rounded-full p-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>

    <form 
      action="/tweets" 
      method="post" 
      enctype="multipart/form-data"
      id="modal-tweet-form"
    >
      {{ csrfField() }}
      
      <div class="p-4">
        <div class="flex space-x-3">
          <!-- User Avatar -->
          <a href="/profile" class="flex-shrink-0 w-12 h-12 rounded-full overflow-hidden">
            @if(auth.user.avatar)
              @if(auth.user.avatar.startsWith('data:'))
                <img src="{{ auth.user.avatar }}" alt="Profile" class="w-full h-full object-cover">
              @elseif(auth.user.avatar.startsWith('http'))
                <img src="{{ auth.user.avatar }}" alt="Profile" class="w-full h-full object-cover">
              @else
                <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-xl font-bold uppercase">
                  {{ auth.user.firstName.charAt(0) }}
                </div>
              @endif
            @else
              <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-xl font-bold uppercase">
                {{ auth.user.firstName.charAt(0) }}
              </div>
            @endif
          </a>

          <div class="flex-1">
            <textarea 
              name="tweet"
              id="modal-tweet-textarea"
              placeholder="What's happening?"
              class="w-full bg-transparent text-white text-xl outline-none placeholder-gray-500 resize-none pt-3 min-h-[120px]"
              maxlength="280"
              oninput="window.tweetModal.updateCharCount()"
            ></textarea>
            
            <!-- Media Preview -->
            <div id="modal-media-preview" class="mt-3 rounded-xl overflow-hidden hidden">
              <div class="relative">
                <img id="modal-media-preview-image" class="max-h-80 w-full object-cover rounded-xl border border-gray-800 hidden">
                <video id="modal-media-preview-video" controls class="max-h-80 w-full rounded-xl border border-gray-800 hidden" preload="none"></video>
                <button 
                  type="button" 
                  onclick="window.tweetModal.removeMediaPreview()"
                  class="absolute top-2 right-2 bg-black bg-opacity-50 text-white rounded-full p-2 hover:bg-opacity-70"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
            
            <div id="modal-char-counter" class="text-right text-gray-500 text-sm mb-3">
              0/280
            </div>
            
            <input 
              type="file" 
              id="modal-mediaInput" 
              name="mediaUrl" 
              accept="image/*,video/*" 
              class="hidden" 
              onchange="window.tweetModal.handleMediaUpload(this)"
            />
            
            <div class="flex justify-between items-center pt-3 border-t border-gray-800">
              <div class="flex space-x-2">
                <button type="button" onclick="document.getElementById('modal-mediaInput').click()">
                  <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                    <g>
                      <path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7.5a1.75 1.75 0 100 3.5 1.75 1.75 0 000-3.5z" fill="currentColor"></path>
                    </g>
                  </svg>
                </button>
                <!-- Other icon buttons -->
                <div>
                  <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                    <g>
                      <path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v13c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-13c0-.276-.224-.5-.5-.5h-13zM18 10.711V9.25h-3.74v5.5h1.44v-1.719h1.7V11.57h-1.7v-.859H18zM11.79 9.25h1.44v5.5h-1.44v-5.5zm-3.07 1.375c.34 0 .77.172 1.02.43l1.03-.86c-.51-.601-1.28-.945-2.05-.945C7.19 9.25 6 10.44 6 12s1.19 2.75 2.72 2.75c.85 0 1.54-.344 2.05-.945v-2.149H8.38v1.032H9.4v.446c-.17.086-.42.172-.68.172-.76 0-1.36-.602-1.36-1.375 0-.688.6-1.375 1.36-1.375z" fill="currentColor"></path>
                    </g>
                  </svg>
                </div>
                <div>
                  <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                    <g>
                      <path d="M6 5c-1.1 0-2 .895-2 2s.9 2 2 2 2-.895 2-2-.9-2-2-2zM2 7c0-2.209 1.79-4 4-4s4 1.791 4 4-1.79 4-4 4-4-1.791-4-4zm20 1H12V6h10v2zM6 15c-1.1 0-2 .895-2 2s.9 2 2 2 2-.895 2-2-.9-2-2-2zm-4 2c0-2.209 1.79-4 4-4s4 1.791 4 4-1.79 4-4 4-4-1.791-4-4zm20 1H12v-2h10v2zM7 7c0 .552-.45 1-1 1s-1-.448-1-1 .45-1 1-1 1 .448 1 1z" fill="currentColor"></path>
                    </g>
                  </svg>
                </div>
                <div>
                  <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                    <g>
                      <path d="M8 9.5C8 8.119 8.672 7 9.5 7S11 8.119 11 9.5 10.328 12 9.5 12 8 10.881 8 9.5zm6.5 2.5c.828 0 1.5-1.119 1.5-2.5S15.328 7 14.5 7 13 8.119 13 9.5s.672 2.5 1.5 2.5zM12 16c-2.224 0-3.021-2.227-3.051-2.316l-1.897.633c.05.15 1.271 3.684 4.949 3.684s4.898-3.533 4.949-3.684l-1.896-.638c-.033.095-.83 2.322-3.053 2.322zm10.25-4.001c0 5.652-4.598 10.25-10.25 10.25S1.75 17.652 1.75 12 6.348 1.75 12 1.75 22.25 6.348 22.25 12zm-2 0c0-4.549-3.701-8.25-8.25-8.25S3.75 7.451 3.75 12s3.701 8.25 8.25 8.25 8.25-3.701 8.25-8.25z" fill="currentColor"></path>
                    </g>
                  </svg>
                </div>
                <div>
                  <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                    <g>
                      <path d="M6 3V2h2v1h6V2h2v1h1.5C18.88 3 20 4.119 20 5.5v2h-2v-2c0-.276-.22-.5-.5-.5H16v1h-2V5H8v1H6V5H4.5c-.28 0-.5.224-.5.5v12c0 .276.22.5.5.5h3v2h-3C3.12 20 2 18.881 2 17.5v-12C2 4.119 3.12 3 4.5 3H6zm9.5 8c-2.49 0-4.5 2.015-4.5 4.5s2.01 4.5 4.5 4.5 4.5-2.015 4.5-4.5-2.01-4.5-4.5-4.5zM9 15.5C9 11.91 11.91 9 15.5 9s6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5S9 19.09 9 15.5zm5.5-2.5h2v2.086l1.71 1.707-1.42 1.414-2.29-2.293V13z" fill="currentColor"></path>
                    </g>
                  </svg>
                </div>
              </div>
              
              <button 
                type="submit"
                id="modal-tweet-button"
                class="bg-white text-black text-sm font-bold rounded-full px-4 py-1.5 capitalize disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Post
              </button>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<script>
  // Create tweetModal object immediately
  window.tweetModal = {
    // Modal control functions
    open: function() {
      try {
        const modal = document.getElementById('tweet-modal');
        if (!modal) throw new Error('Modal element not found');
        
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        
        const textarea = document.getElementById('modal-tweet-textarea');
        if (textarea) {
          textarea.focus();
          textarea.selectionStart = textarea.selectionEnd = textarea.value.length;
        }
      } catch (error) {
        console.error('Error opening modal:', error);
      }
    },
    
    close: function() {
      try {
        const modal = document.getElementById('tweet-modal');
        if (!modal) throw new Error('Modal element not found');
        
        modal.classList.add('hidden');
        document.body.style.overflow = '';
        
        // Reset form
        const textarea = document.getElementById('modal-tweet-textarea');
        const mediaInput = document.getElementById('modal-mediaInput');
        if (textarea) textarea.value = '';
        if (mediaInput) mediaInput.value = '';
        
        this.removeMediaPreview();
        this.updateCharCount();
      } catch (error) {
        console.error('Error closing modal:', error);
      }
    },
    
    // Media handling
    handleMediaUpload: function(input) {
      try {
        if (!input || !input.files || input.files.length === 0) return;
        
        const file = input.files[0];
        if (!file) return;
        
        const previewContainer = document.getElementById('modal-media-preview');
        const imagePreview = document.getElementById('modal-media-preview-image');
        const videoPreview = document.getElementById('modal-media-preview-video');
        
        if (!previewContainer || !imagePreview || !videoPreview) return;
        
        // Validate file size
        const maxImageSize = 5 * 1024 * 1024; // 5MB
        const maxVideoSize = 20 * 1024 * 1024; // 20MB
        
        if (file.type.startsWith('image/') && file.size > maxImageSize) {
          alert('Image size exceeds 5MB limit');
          input.value = '';
          return;
        }
        
        if (file.type.startsWith('video/') && file.size > maxVideoSize) {
          alert('Video size exceeds 20MB limit');
          input.value = '';
          return;
        }
        
        previewContainer.classList.remove('hidden');
        
        const objectUrl = URL.createObjectURL(file);
        const modal = document.getElementById('tweet-modal');
        if (modal) modal.dataset.mediaUrl = objectUrl;
        
        if (file.type.startsWith('image/')) {
          imagePreview.src = objectUrl;
          imagePreview.classList.remove('hidden');
          videoPreview.classList.add('hidden');
        } else if (file.type.startsWith('video/')) {
          videoPreview.src = objectUrl;
          videoPreview.classList.remove('hidden');
          imagePreview.classList.add('hidden');
        }
      } catch (error) {
        console.error('Error handling media upload:', error);
      }
    },
    
    removeMediaPreview: function() {
      try {
        const previewContainer = document.getElementById('modal-media-preview');
        const imagePreview = document.getElementById('modal-media-preview-image');
        const videoPreview = document.getElementById('modal-media-preview-video');
        const mediaInput = document.getElementById('modal-mediaInput');
        
        if (!previewContainer || !imagePreview || !videoPreview || !mediaInput) return;
        
        // Clean up object URLs
        const modal = document.getElementById('tweet-modal');
        if (modal && modal.dataset.mediaUrl) {
          URL.revokeObjectURL(modal.dataset.mediaUrl);
          delete modal.dataset.mediaUrl;
        }
        
        previewContainer.classList.add('hidden');
        imagePreview.classList.add('hidden');
        videoPreview.classList.add('hidden');
        imagePreview.src = '';
        videoPreview.src = '';
        mediaInput.value = '';
      } catch (error) {
        console.error('Error removing media preview:', error);
      }
    },
    
    // Character counter
    updateCharCount: function() {
      try {
        const textarea = document.getElementById('modal-tweet-textarea');
        const counter = document.getElementById('modal-char-counter');
        const button = document.getElementById('modal-tweet-button');
        
        if (!textarea || !counter || !button) return;
        
        const charCount = textarea.value.trim().length;
        counter.textContent = `${charCount}/280`;
        
        // Update counter color
        const remaining = 280 - charCount;
        counter.classList.remove('text-gray-500', 'text-yellow-500', 'text-red-500');
        
        if (remaining < 0) {
          counter.classList.add('text-red-500');
        } else if (remaining <= 30) {
          counter.classList.add('text-yellow-500');
        } else {
          counter.classList.add('text-gray-500');
        }
        
        button.disabled = charCount === 0 || charCount > 280;
      } catch (error) {
        console.error('Error updating character count:', error);
      }
    }
  };

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    // Form submission handler
    async function handleSubmit(e) {
      e.preventDefault();
      const form = e.target;
      
      try {
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) submitButton.disabled = true;
        
        const formData = new FormData(form);
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || 
                         form.querySelector('[name="_csrf"]')?.value;
        
        if (!csrfToken) throw new Error('CSRF token not found');
        
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json',
            'X-CSRF-Token': csrfToken
          }
        });
        
        if (response.ok) {
          form.reset();
          if (form.id === 'modal-tweet-form') window.tweetModal.close();
          window.location.reload();
        } else {
          const errorData = await response.json().catch(() => ({}));
          console.error('Tweet failed:', response.status, errorData);
          alert(`Failed to post tweet: ${errorData.message || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Network error:', error);
        alert('Network error occurred. Please try again.');
      } finally {
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) submitButton.disabled = false;
      }
    }

    // Set up event listeners
    document.getElementById('modal-tweet-form')?.addEventListener('submit', handleSubmit);
    
    // Modal backdrop click handler
    document.getElementById('tweet-modal')?.addEventListener('click', function(e) {
      if (e.target === this) window.tweetModal.close();
    });
    
    // Escape key handler
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        const modal = document.getElementById('tweet-modal');
        if (modal && !modal.classList.contains('hidden')) {
          window.tweetModal.close();
        }
      }
    });
    
    // Initialize character counter
    const textarea = document.getElementById('modal-tweet-textarea');
    if (textarea) {
      textarea.addEventListener('input', function() {
        window.tweetModal.updateCharCount();
      });
      window.tweetModal.updateCharCount();
    }
  });
</script>