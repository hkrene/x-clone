@layout.app({ title: "Twitter Home Page" })
  @slot('meta')
    <meta name="description" content="A clone of Twitter">
  @endslot

  @slot('main')
  <!-- Main Content-->
  <section class="flex-1 border-x border-gray-800 max-w-2xl w-full">
    
    <header class="sticky top-0 bg-black/80 backdrop-blur-md border-b border-gray-800 p-4 z-10">
      <div class="max-w-2xl  flex items-center justify-between">
        <!-- Left side - Profile icon -->
        <div class="flex-shrink-0 w-10 h-10">
          <a href="/profile" class="block w-full h-full rounded-full overflow-hidden">
            @if(user?.avatar)
              <img 
                src="{{ '/uploads/' + (user.avatar || '') }}"
                alt="Profile picture"
                class="w-full h-full object-cover"
              >
            @else
              <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-lg font-bold uppercase">
                {{ user?.firstName?.charAt(0) }}
              </div>
            @endif
          </a>
        </div>

        <!-- Center - X logo -->
        <div class="flex-1 flex justify-center">
          <svg viewBox="0 0 24 24" aria-hidden="true" class="w-8 h-8 text-white">
            <g>
              <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" fill="currentColor"></path>
            </g>
          </svg>
        </div>

        <!-- Right side - Settings/More icon -->
        <div class="flex-shrink-0 w-10 h-10 flex items-center justify-center">
          <svg viewBox="0 0 24 24" width="24" height="24" class="text-white">
            <circle cx="12" cy="6" r="2" fill="currentColor"/>
            <circle cx="12" cy="12" r="2" fill="currentColor"/>
            <circle cx="12" cy="18" r="2" fill="currentColor"/>
          </svg>
          {{--  <i class="bi bi-three-dots text-xl text-white"></i>  --}}
        </div>
      </div>
    </header>


    <!-- new tweet textarea -->
    <div class="hidden md:flex space-x-3 px-4 pt-4 pb-2 border-b border-gray-800">
        <a href="/profile" class="flex-shrink-0 w-12 h-12 rounded-full overflow-hidden">
            {{--  <img src="{{ asset('image/profile0.png') }}" alt="User profile" class="w-full h-full object-cover">  --}}
        @if(user?.avatar)
        <img src="{{ '/uploads/' + (user.avatar || '') }}"
        
        alt="Profile picture"
        class="w-full h-full object-cover"
        >

        @else
          <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-xl font-bold uppercase">
            {{ user?.firstName?.charAt(0) }}
          </div>
        @endif
        </a>

        <!-- Tweet Form -->
          <form 
            action="/tweets" 
            method="post" 
            enctype="multipart/form-data" 
            class="flex-1"
            id="home-tweet-form"
          >
            {{ csrfField() }}

            <textarea 
              name="tweet" 
              id="home-tweet-textarea"
              placeholder="What's happening?"
              class="w-full bg-transparent text-white text-xl outline-none placeholder-gray-500 resize-none pt-3 min-h-[60px]"
              maxlength="280"
              oninput="updateHomeCharCount()"
            ></textarea>

            <div id="home-char-counter" class="text-right text-gray-500 text-sm mb-3">
              0/280
            </div>

            <input type="file" id="home-mediaInput" name="mediaUrl" accept="image/*,video/*" class="hidden" />

            <div class="flex items-center justify-between pt-2 pb-1">
              <div class="flex space-x-1">
                <button type="button" onclick="document.getElementById('home-mediaInput').click()">
                  <i class="bi bi-award" aria-label="Media"></i>
                </button>
                <div><i class="bi bi-file-earmark-gif-fill" aria-label="GIF"></i></div>
                <div><i class="bi bi-bar-chart-fill" aria-label="Poll"></i></div>
                <div><i class="bi bi-emoji-smile-fill" aria-label="Emoji"></i></div>
                <div><i class="bi bi-calendar-event-fill" aria-label="Schedule"></i></div>

              </div>
              <button 
                type="submit" 
                id="home-tweet-button"
                class="bg-blue-500 hover:bg-blue-600 text-white text-sm font-bold rounded-full px-4 py-1.5 capitalize disabled:opacity-50 disabled:cursor-not-allowed" 
                disabled
              >
                Tweet
              </button>
            </div>
          </form>

    </div>

    
  <!-- Tweet content-->
    <div class="divide-y divide-gray-800">
      @if(tweets && Array.isArray(tweets) && tweets.length > 0)
        @each(tweet in tweets)
          <div class="p-4 hover:bg-gray-900/50 cursor-pointer">
            <div class="flex space-x-3">
              <a href="/otherProfile/{{ tweet.author.id }}" class="flex-shrink-0 w-12 h-12 rounded-full overflow-hidden">
                @if(tweet.author?.avatar)
                  <img src="{{ '/uploads/' + tweet.author.avatar }}" alt="User profile" class="w-full h-full object-cover">
                @else
                  <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-xl font-bold uppercase">
                    {{ tweet.author.firstName.charAt(0) }}
                  </div>
                @endif
              </a>
              <div class="flex-1 min-w-0">
                <div class="flex items-center space-x-1">
                  <span class="font-bold text-white">{{ tweet.author?.firstName }} {{ tweet.author?.surname }}</span>
                  @if(tweet.author?.isVerified)
                  <i class="bi bi-patch-check-fill w-4 h-4 text-blue-500" aria-label="Verified"></i>
                  @end
                  <span class="text-gray-500">
                    {{ tweet.author.username.startsWith('@') ? tweet.author.username : `@${tweet.author.username}` }}
                  </span>
                  <span class="text-gray-500 text-sm">
                    {{ tweet.shortTime ?? datetime(tweet.createdAt).setLocale('en').toRelative() }}
                  </span>
                </div>
                <p class="mt-1 text-white text-base leading-snug break-words overflow-hidden text-ellipsis box-border">{{ tweet.content }}</p>

                <!-- Media Attachment -->
                @if(tweet.mediaUrl)
                  <div class="mt-3 rounded-xl overflow-hidden">
                    @let(ext = tweet.mediaUrl.split('.').pop().toLowerCase())
                    @if(['jpg', 'jpeg', 'png', 'gif'].includes(ext))
                      <img 
                        src="{{ tweet.mediaUrl }}" 
                        alt="Tweet media" 
                        class="max-h-96 w-full object-cover rounded-xl border border-gray-800"
                      >
                    @elseif(['mp4', 'webm'].includes(ext))
                      <video 
                        controls 
                        class="max-h-96 w-full rounded-xl border border-gray-800"
                        preload="none"
                      >
                        <source src="{{ tweet.mediaUrl }}" type="video/{{ ext }}">
                      </video>
                    @else
                      <div class="bg-gray-800 p-4 text-gray-400 rounded-xl">
                        Unsupported media type
                      </div>
                    @endif
                  </div>
                @endif

                <!-- Tweet Actions -->
                <div class="flex items-center justify-between mt-3 text-gray-500 max-w-md">
                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                        <i class="bi bi-reply w-5 h-5" aria-label="Reply"></i>
                      </div>
                      <span class="text-xs hover:text-blue-500">0</span>
                    </button>

                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-green-900/20">
                        <i class="bi bi-arrow-repeat w-5 h-5" aria-label="Retweet"></i>
                      </div>
                      <span class="text-xs hover:text-green-500">0</span>
                    </button>

                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-red-900/20">
                        <i class="bi bi-heart w-5 h-5" aria-label="Like"></i>
                      </div>
                      <span class="text-xs hover:text-red-500">0</span>
                    </button>

                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                        <i class="bi bi-share w-5 h-5" aria-label="Share"></i>
                      </div>
                    </button>
                  </div>


              </div>
            </div>
          </div>
        @endeach
      @else
        <div class="p-4 text-center text-gray-500">
          No tweets to display at the moment.
        </div>
      @endif
    </div>
  </section>

  @!component('components/tweetbtn', { position: 'bottom-6' })
  @endslot
@end

  @!component('components/navbar')


V1

  public async showHome({ view, auth }: HttpContext) {
    const user = await auth.use('web').authenticate()
    // Load tweets with author information
    const tweets = await Tweet.query()
      // .whereNot('user_id', user.id)
      .preload('author')
      .limit(50)
      .orderBy('createdAt', 'desc')

    return view.render('pages/home', {
      user: {
        ...user.serialize(),
        avatar: user.avatar || '',
        firstName: user.firstName || '',
        surname: user.surname || '',
        username: user.username || '', 
        isVerified: user.isVerified || false,
      },
      tweets: tweets.map(tweet => ({
        ...tweet.serialize(),
        shortTime: this.formatShortTime(tweet.createdAt)
      }))
    })
  }

V2

  public async showHome({ view, auth }: HttpContext) {
  const user = await auth.use('web').authenticate()
  
  // Get IDs of users that the current user follows
  const following = await Follow.query()
    .where('id_user', user.id)
    .select('id_user_following')
  
  const followingIds = following.map(f => f.idUserFollowing)

  // For You feed - all tweets except current user's
  const forYouTweets = await Tweet.query()
    .whereNot('user_id', user.id)
    .preload('author')
    .orderBy('created_at', 'desc')
    .limit(50)

  // Following feed - only tweets from followed users
  const followingTweets = followingIds.length > 0
    ? await Tweet.query()
        .whereIn('user_id', followingIds)
        .preload('author')
        .orderBy('created_at', 'desc')
        .limit(50)
    : []

  return view.render('pages/home', {
    user: {
      ...user.serialize(),
      avatar: user.avatar || '',
      firstName: user.firstName || '',
      surname: user.surname || '',
      username: user.username || '', 
      isVerified: user.isVerified || false,
      following_count: followingIds.length
    },
    forYouTweets: forYouTweets.map(tweet => ({
      ...tweet.serialize(),
      shortTime: this.formatShortTime(tweet.createdAt)
    })),
    followingTweets: followingTweets.map(tweet => ({
      ...tweet.serialize(),
      shortTime: this.formatShortTime(tweet.createdAt)
    }))
  })
}



<!-- Tabs -->
<div x-data="{ tab: 'posts' }">
  <div class="flex border-b border-gray-800 mt-4">
    <button 
      @click="tab = 'posts'" 
      :class="tab === 'posts' ? 'border-blue-500 text-white' : 'text-gray-500 hover:bg-gray-900'" 
      class="flex-1 text-center py-4 font-medium border-b-4 transition-colors duration-200"
    >
      Posts
    </button>
    <button 
      @click="tab = 'replies'" 
      :class="tab === 'replies' ? 'border-blue-500 text-white' : 'text-gray-500 hover:bg-gray-900'" 
      class="flex-1 text-center py-4 font-medium border-b-4 transition-colors duration-200"
    >
      Replies
    </button>
    <button 
      @click="tab = 'media'" 
      :class="tab === 'media' ? 'border-blue-500 text-white' : 'text-gray-500 hover:bg-gray-900'" 
      class="flex-1 text-center py-4 font-medium border-b-4 transition-colors duration-200"
    >
      Media
    </button>
    <button 
      @click="tab = 'likes'" 
      :class="tab === 'likes' ? 'border-blue-500 text-white' : 'text-gray-500 hover:bg-gray-900'" 
      class="flex-1 text-center py-4 font-medium border-b-4 transition-colors duration-200"
    >
      Likes
    </button>
  </div>

  <!-- Tabs content -->
  <div class="divide-y divide-gray-800 mt-4">

    <div x-show="tab === 'posts'">
       <!-- Tweet Feed -->
        
      <div class="divide-y divide-gray-800">
        @if(tweets && tweets.length > 0)
          @each(tweet in tweets)
            <div class="p-4 hover:bg-gray-900/50 cursor-pointer transition-colors duration-200">
              <div class="flex space-x-3">
                <!-- User Avatar -->
                <a 
                  href="{{ `/profile/${user.username.replace('@', '')}` }}" 
                  class="flex-shrink-0 w-12 h-12 rounded-full overflow-hidden"
                  aria-label="{{ user.firstName }}'s profile"
                >
                  @if(user.avatar)
                    <img 
                      src="{{ user.avatar.startsWith('/') ? user.avatar : '/uploads/' + user.avatar }}" 
                      alt="{{ user.firstName }}'s avatar" 
                      class="w-full h-full object-cover"
                      loading="lazy"
                    >
                  @else
                    <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-xl font-bold uppercase">
                      {{ user.firstName.charAt(0) || '' }}
                    </div>
                  @endif
                </a>

                <!-- Tweet Content -->
                <div class="flex-1 min-w-0">
                  <!-- User Info -->
                  <div class="flex items-center space-x-1 flex-wrap">
                    <a 
                      href="{{ `/profile/${user.username.replace('@', '')}` }}" 
                      class="font-bold text-white hover:underline"
                    >
                      {{ user.firstName }} {{ user.surname }}
                    </a>
                    
                    @if(user.isVerified)
                      <span class="sr-only">Verified</span>
                      <img 
                        src="{{ asset('icons/Verified.svg') }}" 
                        alt="" 
                        class="w-4 h-4"
                        aria-hidden="true"
                      >
                    @endif
                    
                    <a 
                      href="{{ `/profile/${user.username.replace('@', '')}` }}" 
                      class="text-gray-500 hover:underline"
                    >
                      {{ user.username }}
                    </a>
                    
                    <span class="text-gray-500 text-sm">
                      {{ tweet.shortTime }}
                    </span>
                  </div>

                  <!-- Tweet Text -->
                  <p class="mt-1 text-white text-base leading-snug break-words overflow-hidden text-ellipsis box-border">
                    {{ tweet.content }}
                  </p>

                  <!-- Media Attachment -->
                  @if(tweet.mediaUrl)
                    @let(ext = tweet.mediaUrl?.split('.').pop()?.toLowerCase() || '')

                    <div class="mt-3 rounded-xl overflow-hidden">
                      @if(user.isVerified)
                        <i class="bi bi-patch-check-fill w-4 h-4 text-blue-500" aria-label="Verified"></i>
                      @endif

                      @if(['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext))
                        <img 
                          src="{{ tweet.mediaUrl }}" 
                          alt="Tweet media" 
                          class="max-h-96 w-full object-cover rounded-xl border border-gray-800"
                          loading="lazy"
                        >
                      @elseif(['mp4', 'webm', 'mov'].includes(ext))
                        <video 
                          controls 
                          class="max-h-96 w-full rounded-xl border border-gray-800"
                          preload="metadata"
                          aria-label="Embedded video"
                        >
                          <source src="{{ tweet.mediaUrl }}" type="video/{{ ext }}">
                          Your browser does not support the video tag.
                        </video>
                      @else
                        <div class="bg-gray-800 p-4 text-gray-400 rounded-xl">
                          Unsupported media type
                        </div>
                      @endif
                    </div>
                  @endif


                  <!-- Tweet Actions -->
                  <div class="flex items-center justify-between mt-3 text-gray-500 max-w-md">
                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                        <i class="bi bi-reply w-5 h-5" aria-label="Reply"></i>
                      </div>
                      <span class="text-xs hover:text-blue-500">0</span>
                    </button>

                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-green-900/20">
                        <i class="bi bi-arrow-repeat w-5 h-5" aria-label="Retweet"></i>
                      </div>
                      <span class="text-xs hover:text-green-500">0</span>
                    </button>

                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-red-900/20">
                        <i class="bi bi-heart w-5 h-5" aria-label="Like"></i>
                      </div>
                      <span class="text-xs hover:text-red-500">0</span>
                    </button>

                    <button class="flex items-center space-x-1 group">
                      <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                        <i class="bi bi-share w-5 h-5" aria-label="Share"></i>
                      </div>
                    </button>
                  </div>

                </div>
              </div>
            </div>
          @endeach
        @else
          <div class="p-4 text-center text-gray-500">
            No tweets to display at the moment.
          </div>
        @endif
      </div>
          </div>

            <div x-show="tab === 'replies'">
              <p class="text-gray-500 text-center py-4">Replies coming soon...</p>
            </div>

            <div x-show="tab === 'media'">
              <p class="text-gray-500 text-center py-4">Media content goes here.</p>
            </div>

            <div x-show="tab === 'likes'">
              <p class="text-gray-500 text-center py-4">Liked tweets coming soon...</p>
            </div>

          </div>
      </div>









OTHERUSER view
      
<!-- Tabs -->
<div x-data="{ tab: 'posts' }" class="sticky top-0 z-10 bg-black/80 backdrop-blur-md">
  <div class="flex border-b border-gray-800">
    <button 
      @click="tab = 'posts'" 
      :class="{
        'text-white font-bold': tab === 'posts',
        'text-gray-500 hover:bg-gray-900/50': tab !== 'posts'
      }"
      class="flex-1 py-4 text-center relative transition-colors duration-200"
    >
      Posts
      <div 
        x-show="tab === 'posts'"
        class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-16 h-1 bg-blue-500 rounded-full"
      ></div>
    </button>
    <button 
      @click="tab = 'replies'" 
      :class="{
        'text-white font-bold': tab === 'replies',
        'text-gray-500 hover:bg-gray-900/50': tab !== 'replies'
      }"
      class="flex-1 py-4 text-center relative transition-colors duration-200"
    >
      Replies
      <div 
        x-show="tab === 'replies'"
        class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-16 h-1 bg-blue-500 rounded-full"
      ></div>
    </button>
    <button 
      @click="tab = 'media'" 
      :class="{
        'text-white font-bold': tab === 'media',
        'text-gray-500 hover:bg-gray-900/50': tab !== 'media'
      }"
      class="flex-1 py-4 text-center relative transition-colors duration-200"
    >
      Media
      <div 
        x-show="tab === 'media'"
        class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-16 h-1 bg-blue-500 rounded-full"
      ></div>
    </button>
    <button 
      @click="tab = 'likes'" 
      :class="{
        'text-white font-bold': tab === 'likes',
        'text-gray-500 hover:bg-gray-900/50': tab !== 'likes'
      }"
      class="flex-1 py-4 text-center relative transition-colors duration-200"
    >
      Likes
      <div 
        x-show="tab === 'likes'"
        class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-16 h-1 bg-blue-500 rounded-full"
      ></div>
    </button>
  </div>
</div>

<!-- Tabs content -->
<div>
  <div x-show="tab === 'posts'">
    <!-- Your existing posts content EXACTLY as is -->
    <div class="divide-y divide-gray-800">
      @if(tweets && tweets.length > 0)
        @each(tweet in tweets)
          <div class="p-4 hover:bg-gray-900/50 cursor-pointer transition-colors duration-200">
            <div class="flex space-x-3">
              <!-- User Avatar -->
              <a 
                href="{{ `/profile/${user.username.replace('@', '')}` }}" 
                class="flex-shrink-0 w-12 h-12 rounded-full overflow-hidden"
                aria-label="{{ user.firstName }}'s profile"
              >
                @if(user.avatar)
                  <img 
                    src="{{ user.avatar.startsWith('/') ? user.avatar : '/uploads/' + user.avatar }}" 
                    alt="{{ user.firstName }}'s avatar" 
                    class="w-full h-full object-cover"
                    loading="lazy"
                  >
                @else
                  <div class="w-full h-full bg-gray-700 flex items-center justify-center text-white text-xl font-bold uppercase">
                    {{ user.firstName.charAt(0) }}{{ user.surname?.charAt(0) || '' }}
                  </div>
                @endif
              </a>

              <!-- Tweet Content -->
              <div class="flex-1 min-w-0">
                <!-- User Info -->
                <div class="flex items-center space-x-1 flex-wrap">
                  <a 
                    href="{{ `/profile/${user.username.replace('@', '')}` }}" 
                    class="font-bold text-white hover:underline"
                  >
                    {{ user.firstName }} {{ user.surname }}
                  </a>
                  
                  @if(user.isVerified)
                    <span class="sr-only">Verified</span>
                    <i class="bi bi-patch-check-fill w-4 h-4 text-blue-500" aria-label="Verified"></i>
                  @endif
                  
                  <a  class="text-gray-500 hover:underline" >
                    {{ user.username }}
                  </a>
                  
                  <span class="text-gray-500 text-sm">
                    {{ tweet.shortTime }}
                  </span>
                </div>

                <!-- Tweet Text -->
                <p class="mt-1 text-white text-base leading-snug break-words overflow-hidden text-ellipsis box-border">
                  {{ tweet.content }}
                </p>

                <!-- Media Attachment -->
                @if(tweet.mediaUrl)
                  <div class="mt-3 rounded-xl overflow-hidden">
                    @let(ext = tweet.mediaUrl?.split('.').pop()?.toLowerCase() || '')
                    @if(['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext))
                      <img 
                        src="{{ tweet.mediaUrl }}" 
                        alt="Tweet media" 
                        class="max-h-96 w-full object-cover rounded-xl border border-gray-800"
                        loading="lazy"
                      >
                    @elseif(['mp4', 'webm', 'mov'].includes(ext))
                      <video 
                        controls 
                        class="max-h-96 w-full rounded-xl border border-gray-800"
                        preload="metadata"
                        aria-label="Embedded video"
                      >
                        <source src="{{ tweet.mediaUrl }}" type="video/{{ ext }}">
                        Your browser does not support the video tag.
                      </video>
                    @else
                      <div class="bg-gray-800 p-4 text-gray-400 rounded-xl">
                        Unsupported media type
                      </div>
                    @endif
                  </div>
                @endif

                <!-- Tweet Actions -->
                <div class="flex items-center justify-between mt-3 text-gray-500 max-w-md">
                  <!-- Reply Button -->
                  <button class="flex items-center space-x-1 group">
                    <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                      <svg viewBox="0 0 24 24" width="20" height="20" class="text-gray-500 group-hover:text-blue-500" aria-label="Reply">
                        <g>
                          <path d="M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01zm8.005-6c-3.317 0-6.005 2.69-6.005 6 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z" fill="currentColor"></path>
                        </g>
                      </svg>
                    </div>
                    <span class="text-xs group-hover:text-blue-500">0</span>
                  </button>

                  <!-- Retweet Button -->
                  <button class="flex items-center space-x-1 group">
                    <div class="p-2 rounded-full group-hover:bg-green-900/20">
                      <svg viewBox="0 0 24 24" width="20" height="20" class="text-gray-500 group-hover:text-green-500" aria-label="Retweet">
                        <g>
                          <path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z" fill="currentColor"></path>
                        </g>
                      </svg>
                    </div>
                    <span class="text-xs group-hover:text-green-500">0</span>
                  </button>

                  <!-- Like Button -->
                  <button class="flex items-center space-x-1 group">
                    <div class="p-2 rounded-full group-hover:bg-red-900/20">
                      <svg viewBox="0 0 24 24" width="20" height="20" class="text-gray-500 group-hover:text-red-500" aria-label="Like">
                        <g>
                          <path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z" fill="currentColor"></path>
                        </g>
                      </svg>
                    </div>
                    <span class="text-xs group-hover:text-red-500">0</span>
                  </button>

                  <button class="flex items-center space-x-1 group">
                    <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                      <svg viewBox="0 0 24 24" width="18" height="18" class="text-gray-500 hover:text-blue-500">
                        <g>
                          <path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z" fill="currentColor"></path>
                        </g>
                      </svg>
                    </div>
                  </button>
                  
                  <!-- Share Button -->
                  <button class="flex items-center space-x-1 group">
                    <div class="p-2 rounded-full group-hover:bg-blue-900/20">
                      <svg viewBox="0 0 24 24" width="20" height="20" class="text-gray-500 group-hover:text-blue-500" aria-label="Share">
                        <g>
                          <path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.3 3.3-1.41-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z" fill="currentColor"></path>
                        </g>
                      </svg>
                    </div>
                  </button>
                </div>

              </div>
            </div>
          </div>
        @endeach
      @else
        <div class="p-4 text-center text-gray-500">
          No tweets to display at the moment.
        </div>
      @endif
    </div>
  </div>

  <div x-show="tab === 'replies'">
    <p class="text-gray-500 text-center py-4">Replies coming soon...</p>
  </div>

  <div x-show="tab === 'media'">
    <p class="text-gray-500 text-center py-4">Media content goes here.</p>
  </div>

  <div x-show="tab === 'likes'">
    <p class="text-gray-500 text-center py-4">Liked tweets coming soon...</p>
  </div>
</div>







import User from '#models/user'
import { uploadToSupabase, deleteFromSupabase } from '#services/uploader'
import Follow from '#models/follow'

// import { createUserValidator } from '#validators/user'
import Tweet from '#models/tweet'
import type { HttpContext } from '@adonisjs/core/http'
import app from '@adonisjs/core/services/app'
// import { cuid } from '@adonisjs/core/helpers'
// import Application from '@adonisjs/core/services/app'
// import { uploadToCloudinary } from 'services/cloudinary'
import { DateTime } from 'luxon'


//Shows home page with tweets
export default class ProfilesController {
  public async showHome({ view, auth }: HttpContext) {
  const user = await auth.use('web').authenticate()
  
  // Get IDs of users that the current user follows
  const following = await Follow.query()
    .where('id_user', user.id)
    .select('id_user_following')
  
  const followingIds = following.map(f => f.idUserFollowing)

  // For You feed - all tweets except current user's
  const forYouTweets = await Tweet.query()
    .whereNot('user_id', user.id)
    .preload('author')
    .orderBy('created_at', 'desc')
    .limit(50)

  // Following feed - only tweets from followed users
  const followingTweets = followingIds.length > 0
    ? await Tweet.query()
        .whereIn('user_id', followingIds)
        .preload('author')
        .orderBy('created_at', 'desc')
        .limit(50)
    : []

  return view.render('pages/home', {
    user: {
      ...user.serialize(),
      avatar: user.avatar || '',
      firstName: user.firstName || '',
      surname: user.surname || '',
      username: user.username || '', 
      isVerified: user.isVerified || false,
      following_count: followingIds.length
    },
    forYouTweets: forYouTweets.map(tweet => ({
      ...tweet.serialize(),
      shortTime: this.formatShortTime(tweet.createdAt)
    })),
    followingTweets: followingTweets.map(tweet => ({
      ...tweet.serialize(),
      shortTime: this.formatShortTime(tweet.createdAt)
    }))
  })
}


  //This method renders the edit profile page with the user's current information
  public async showEditProfile({ view, auth }: HttpContext) {
    const user = await auth.use('web').authenticate()

    return view.render('pages/editProfil', {
      user: {
        ...user.serialize(),
        bannerImage: user.bannerImage || '',
        avatar: user.avatar || '',
        firstName: user.firstName || '',
        surname: user.surname || '',
        bio: user.bio || '',
        location: user.location || '',
        website: user.website || '',
        dateOfBirth: user.dateOfBirth || '',
      },
    })
  }


  //This method updates the user's profile information based on the input received from the request 
  // After updating, it redirects the user back to their profile page

  public async update({ request, response, auth }: HttpContext) {
    const firstName = request.input('firstName')
    const surname = request.input('surname')
    const bio = request.input('bio')
    const location = request.input('location')
    const website = request.input('website')
    const dateOfBirth = request.input('dateOfBirth')
    const bannerImage = request.file('banner')
    const avatar = request.file('avatar')

    const user = await User.findOrFail(auth.use('web').user?.id)

    if (firstName) user.firstName = firstName
    if (surname) user.surname = surname
    if (bio) user.bio = bio
    if (location) user.location = location
    if (website) user.website = website
    if (dateOfBirth) user.dateOfBirth = dateOfBirth

    // if (bannerImage) {
    //   await bannerImage.move(app.makePath('public/uploads'), {
    //     name: `${cuid()}.${bannerImage.extname}`,
    //   })
    //   user.bannerImage = bannerImage.fileName || ''
    // }
    

if (bannerImage) {
  await bannerImage.move(app.tmpPath())

  if (user.bannerImage?.includes('media/')) {
    await deleteFromSupabase(user.bannerImage)
  }

  const path = `banners/${user.id}_${Date.now()}.${bannerImage.extname}`
  const publicPath = await uploadToSupabase(bannerImage.filePath!, path, bannerImage.headers['content-type'])
  user.bannerImage = publicPath
}

    // if (avatar) {
    //   await avatar.move(app.makePath('public/uploads'), {
    //     name: `${cuid()}.${avatar.extname}`,
    //   })
    //   user.avatar = avatar.fileName || ''
    // }

    if (avatar) {
      await avatar.move(app.tmpPath())


  if (user.avatar?.includes('media/')) {
    await deleteFromSupabase(user.avatar)
  }

  const path = `avatars/${user.id}_${Date.now()}.${avatar.extname}`
  const publicPath = await uploadToSupabase(avatar.filePath!, path, avatar.headers['content-type'])
  user.avatar = publicPath
}

    await user.save()
    return response.redirect('/profile')

  }


  
// This method retrieves the user's profile based on the username parameter or the authenticated user  
  public async showProfile({ params, view, auth }: HttpContext) {
    let user: User | null = null

    if (params.username) {
      user = await User.query()
        .where('username', params.username)
        .preload('tweets', (query) => query.orderBy('createdAt', 'desc'))
        .preload('followers')
        .preload('following')
        .first()
    } else {
      user = await auth.use('web').authenticate().catch(() => null)
      if (user) {
        await user.load('tweets', (query) => query.orderBy('createdAt', 'desc'))
        await user.load('followers')
        await user.load('following')
      }
    }

    if (!user) {
      return view.render('pages/profile')
    }

    const tweets = (user.tweets || []).map((tweet) => ({
      ...tweet.serialize(),
      shortTime: this.formatShortTime(tweet.createdAt), 
    }))

    const followersCount = user.followers?.length || 0
    const followingCount = user.following?.length || 0
    const postsCount = tweets.length

    return view.render('pages/profile', {
      user: {
        ...user.serialize(),
        username: user.username ? `@${user.username}` : '', 
        avatar: user.avatar,
        bannerImage: user.bannerImage || '',
        postsCount,
        followersCount,
        followingCount,
        joinedDate: user.createdAt.toFormat('MMMM yyyy'),
      },
      tweets,
    })
  }



  public async showOtherProfile({ params, view, auth, response }: HttpContext) {
  const userAuth = auth.user!

  const user = await User.query()
    .where('id', params.id)
    .preload('tweets', (query) => {
      query.orderBy('created_at', 'desc')
    })
    .withCount('followers', (query) => query.as('followers_count'))
    .withCount('following', (query) => query.as('following_count'))
    .firstOrFail()

  console.log('Extras:', user.$extras)

  if (user.id === userAuth.id) {
    return response.redirect('/profile')
  }

  const postsCount = user.tweets.length
  // const followersCount = user.$extras.followers_count
  // const followingCount = user.$extras.following_count

  const followRelation = await Follow.query()
    .where('id_user', userAuth.id)
    .andWhere('id_user_following', user.id)
    .first()

  const isFollowing = !!followRelation

  return view.render('pages/otherProfile', {
    user: {
      ...user.serialize(),
      username: user.username ? `@${user.username}` : '',
      avatar: user.avatar,
      bannerImage: user.bannerImage || '',
      postsCount,
      // followersCount,
      // followingCount,
      joinedDate: user.createdAt.toFormat('MMMM yyyy'),
    },
    tweets: user.tweets.map((tweet) => ({
      ...tweet.serialize(),
      shortTime: tweet.createdAt.toRelative(),
    })),
    isFollowing,
  })
}


  private formatShortTime(date: DateTime): string {
    const diffMinutes = date.diffNow().as('minutes') * -1
    
    if (diffMinutes < 1) {
      return 'now'
    }
    if (diffMinutes < 60) {
      return `${Math.round(diffMinutes)}m`
    }
    if (diffMinutes < 1440) {
      return `${Math.round(diffMinutes / 60)}h`
    }
    return `${Math.round(diffMinutes / 1440)}d`
  }
}








<div>
                    <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                      <g>
                        <path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v13c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-13c0-.276-.224-.5-.5-.5h-13zM18 10.711V9.25h-3.74v5.5h1.44v-1.719h1.7V11.57h-1.7v-.859H18zM11.79 9.25h1.44v5.5h-1.44v-5.5zm-3.07 1.375c.34 0 .77.172 1.02.43l1.03-.86c-.51-.601-1.28-.945-2.05-.945C7.19 9.25 6 10.44 6 12s1.19 2.75 2.72 2.75c.85 0 1.54-.344 2.05-.945v-2.149H8.38v1.032H9.4v.446c-.17.086-.42.172-.68.172-.76 0-1.36-.602-1.36-1.375 0-.688.6-1.375 1.36-1.375z" fill="currentColor"></path>
                      </g>
                    </svg>
                  </div>
                  <div>
                    <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                      <g>
                        <path d="M6 5c-1.1 0-2 .895-2 2s.9 2 2 2 2-.895 2-2-.9-2-2-2zM2 7c0-2.209 1.79-4 4-4s4 1.791 4 4-1.79 4-4 4-4-1.791-4-4zm20 1H12V6h10v2zM6 15c-1.1 0-2 .895-2 2s.9 2 2 2 2-.895 2-2-.9-2-2-2zm-4 2c0-2.209 1.79-4 4-4s4 1.791 4 4-1.79 4-4 4-4-1.791-4-4zm20 1H12v-2h10v2zM7 7c0 .552-.45 1-1 1s-1-.448-1-1 .45-1 1-1 1 .448 1 1z" fill="currentColor"></path>
                      </g>
                    </svg>
                  </div>
                  <div>
                    <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                      <g>
                        <path d="M8 9.5C8 8.119 8.672 7 9.5 7S11 8.119 11 9.5 10.328 12 9.5 12 8 10.881 8 9.5zm6.5 2.5c.828 0 1.5-1.119 1.5-2.5S15.328 7 14.5 7 13 8.119 13 9.5s.672 2.5 1.5 2.5zM12 16c-2.224 0-3.021-2.227-3.051-2.316l-1.897.633c.05.15 1.271 3.684 4.949 3.684s4.898-3.533 4.949-3.684l-1.896-.638c-.033.095-.83 2.322-3.053 2.322zm10.25-4.001c0 5.652-4.598 10.25-10.25 10.25S1.75 17.652 1.75 12 6.348 1.75 12 1.75 22.25 6.348 22.25 12zm-2 0c0-4.549-3.701-8.25-8.25-8.25S3.75 7.451 3.75 12s3.701 8.25 8.25 8.25 8.25-3.701 8.25-8.25z" fill="currentColor"></path>
                      </g>
                    </svg>
                  </div>
                  <div>
                    <svg viewBox="0 0 24 24" width="18" height="18" class="text-blue-500">
                      <g>
                        <path d="M6 3V2h2v1h6V2h2v1h1.5C18.88 3 20 4.119 20 5.5v2h-2v-2c0-.276-.22-.5-.5-.5H16v1h-2V5H8v1H6V5H4.5c-.28 0-.5.224-.5.5v12c0 .276.22.5.5.5h3v2h-3C3.12 20 2 18.881 2 17.5v-12C2 4.119 3.12 3 4.5 3H6zm9.5 8c-2.49 0-4.5 2.015-4.5 4.5s2.01 4.5 4.5 4.5 4.5-2.015 4.5-4.5-2.01-4.5-4.5-4.5zM9 15.5C9 11.91 11.91 9 15.5 9s6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5S9 19.09 9 15.5zm5.5-2.5h2v2.086l1.71 1.707-1.42 1.414-2.29-2.293V13z" fill="currentColor"></path>
                      </g>
                    </svg>
                  </div>
